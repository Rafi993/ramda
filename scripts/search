#!/usr/bin/env node

'use strict';

const fs = require('fs'),
      path = require('path'),
      commandLineArgs = require('command-line-args'),
      R = require('../dist/ramda.min'),
      exec = require('child_process').exec;

const functionList = R.keys(R);

const optionDefinitions = [
  { name: 'folder',alias: 'f', type: String, defaultOption: true ,defaultValue :'./'}
]

const options = commandLineArgs(optionDefinitions)

const walkSync = (dir, filelist = []) => {
  fs.readdirSync(dir).forEach(file => {
    filelist = fs.statSync(path.join(dir, file)).isDirectory()
      ? walkSync(path.join(dir, file), filelist)
      : filelist.concat(path.join(dir, file));
  });
return filelist;
}

const searchFiles = (file) => {
    let filedata = fs.readFileSync(file, "utf-8");

    return R.filter((name)=> filedata.indexOf('R.'+name) > -1 ,functionList)    
}

const filepahts = walkSync(options.folder).filter(file => file.includes('.js'));
const list = R.map(searchFiles,filepahts);

let buildArgsarray = R.replace(/,/g,' ',R.toString(R.uniq(R.flatten(list)).map((fnName) => 'src/'+fnName+'.js')));                     
                 
let buildArgs = buildArgsarray.slice(1,buildArgsarray.length-1);

exec('node ./build '+buildArgs, (error, stdout, stderr) => {
  if (error) {
    console.error(`exec error: ${error}`);
    return;
  }
  console.log(`stdout: ${stdout}`);
  console.log(`stderr: ${stderr}`);
});